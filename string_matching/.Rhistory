load("/home/lampros/kaggle_competitions/rain2/train_padding.RData")
psnr = suppressWarnings(system2(command = "compare",
args = c("-metric", "PSNR", "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR/imgset0594/LR007.png",
"/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR/imgset0594/LR008.png", "null:"),
stdout = TRUE,
stderr = TRUE))
psnr
tr = list.dirs(tr_d)
tr_d = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/deep_learn_train_HR"
te_d_nir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR"
te_d_red = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/RED"
tr = list.dirs(tr_d)
length(tr)
tr = list.files(tr_d)
length(tr)
te1 = list.dirs(te_d_nir)
te2 = list.dirs(te_d_red)
length(c(te1, te2))
length(te1)
length(te1) + length(te2)
length(te2)
te2
te1 = list.dirs(te_d_nir, full.names = F)
te1
te1[1]
te2 = list.dirs(te_d_red, full.names = F)
te2
length(tr)
length(te1)
length(te2)
length(te1[2:length(te1)]) + length(te2[2:length(te1)])
length(te1[2:length(te1)]) + length(te2[2:length(te2)])
len_te = length(te1[2:length(te1)]) + length(te2[2:length(te2)])
len_tr = length(tr)
len_te = length(te1[2:length(te1)]) + length(te2[2:length(te2)])
len_te / len_tr
10*1 / 6.52
(3.35+3.15+1.5+2.7+3.15+3) / 6
(3.35+3.15+1.5+2.7+3.15) / 5
?norm
?normalize
??normalize
OpenImageR::norm_range_gauss
OpenImageR:::norm_range_gauss
cmd = paste(c("convert ", "/home/lampros/kaggle_competitions/PROBA_V/probav_data/PREDS_TEST/tmp.png", " -depth 16 -colorspace gray -define png:color-type=0 -define png:bit-depth=16 ", "/home/lampros/kaggle_competitions/PROBA_V/probav_data/PREDS_TEST/TMP_16bit.png"), collapse = "")
cmd = paste(c("convert ", "/home/lampros/kaggle_competitions/PROBA_V/probav_data/PREDS_TEST/tmp.png", " -depth 16 -colorspace gray -define png:color-type=0 -define png:bit-depth=16 ", "/home/lampros/kaggle_competitions/PROBA_V/probav_data/PREDS_TEST/TMP_16bit.png"), collapse = "")
3/5
keep_LR_from_subfolder = function(subfolder_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR/imgset1306",
save_dir = "",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = FALSE) {
lst = list.files(subfolder_path, full.names = T)
NCHAR_sb = nchar(subfolder_path)
keep_dir_ext = substr(subfolder_path, NCHAR_sb-3, NCHAR_sb)
keep_LR_image = NA
NO_DATA = Inf
ID = NA
PERCENT = Inf
for (i in 1:length(lst)) {
tmp_vec = strsplit(lst[i], "/")[[1]]
last_item = tmp_vec[length(tmp_vec)]
first_2letters = substr(last_item, 1, 2)
if (first_2letters %in% c("QM", "LR")) {
num_item = as.numeric(substr(last_item, 4, 5))
if (first_2letters == "QM") {
tmp_im = OpenImageR::readImage(lst[i])
idx = length(which(tmp_im == 0))
if (idx < NO_DATA) {
NO_DATA = idx
PERCENT = round(idx / length(tmp_im), 3)
str_spl = strsplit(lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl)]
str_spl = strsplit(str_spl, "[.]")[[1]][1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, 3, NCHAR)                         # extract the number of the image
ID = str_spl                                                # update the ID
}
}
}
keep_LR_image = paste(c(subfolder_path, "/LR", ID, ".png"), collapse = "")
}
if (save_dir != "") {
if (substr(save_dir, nchar(save_dir), nchar(save_dir)) == "/") {
tmp_save_path = paste(c(save_dir, "imgset", keep_dir_ext, ".png"), collapse = "")
# tmp_save_path = paste(c(save_dir, keep_dir_ext, ".png"), collapse = "")
}
else {
tmp_save_path = paste(c(save_dir, "/imgset", keep_dir_ext, ".png"), collapse = "")
# tmp_save_path = paste(c(save_dir, "/", keep_dir_ext, ".png"), collapse = "")
}
# if (substr(save_dir, nchar(save_dir), nchar(save_dir)) == "/") {
#   tmp_save_path = paste(c(save_dir, "dir_", keep_dir_ext, "_", "LR", ID, ".png"), collapse = "")
# }
# else {
#   tmp_save_path = paste(c(save_dir, "/dir_", keep_dir_ext, "_", "LR", ID, ".png"), collapse = "")
# }
if (system_cp) {
system2(command = "cp", args = c(keep_LR_image, tmp_save_path))
}
else {
tmp_im = OpenImageR::readImage(keep_LR_image)                                                                 # in case of many images simply use: system("cp /from_path/tmp.png /to_dir")
if (convert_to_3d) {
tmp_im = OpenImageR::List_2_Array(list(tmp_im, tmp_im, tmp_im))                                               # convert to 3-dimensional (to be able to use with deep learning)
}
if (!is.null(apply_function)) {
tmp_im = apply_function(tmp_im)
}
OpenImageR::writeImage(tmp_im, tmp_save_path)             # png package writes only 'raw' or 'numeric' data
# loder::writePng(tmp_im, tmp_save_path)
}
}
return(list(keep_LR_image = keep_LR_image, NO_DATA = NO_DATA, PERCENT_NO_DATA = PERCENT))
}
extr_LR_imgs = all_LR_images(NIR_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR",
RED_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/RED",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/deep_learn_test",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
all_LR_images = function(NIR_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR",
RED_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/RED",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/deep_learn_test",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = FALSE) {
lst_NIR = list.files(NIR_dir, full.names = T)
lst_RED = list.files(RED_dir, full.names = T)
both_NIR_RED = c(lst_NIR, lst_RED)
percent_nodata = rep(NA, length(both_NIR_RED))
if (dir.exists(save_dir)) {
system(paste("rm -r", save_dir))                          # remove the directory in case that it exists
dir.create(save_dir)
}
if (!dir.exists(save_dir)) {
dir.create(save_dir)
}
for (i in 1:length(both_NIR_RED)) {
each_lr_im = keep_LR_from_subfolder(subfolder_path = both_NIR_RED[i], save_dir = save_dir, convert_to_3d = convert_to_3d, apply_function = apply_function, system_cp = system_cp)
percent_nodata[i] = each_lr_im$PERCENT_NO_DATA
}
return(percent_nodata)
}
extr_LR_imgs = all_LR_images(NIR_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR",
RED_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/RED",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/deep_learn_test",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
extr_LR_imgs = all_LR_images(NIR_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR",
RED_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/RED",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/deep_learn_train_LR",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
move_HR_2_folder = function(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
system_cp = FALSE) {
hr_lst = list.files(proba_data_path, full.names = T, recursive = T, include.dirs = F, pattern = "HR.png")
dir_HR_create = paste0(proba_data_path, "deep_learn_train_HR/")
if (dir.exists(dir_HR_create)) {
system(paste("rm -r", dir_HR_create))
}
else {
dir.create(dir_HR_create)
}
count = 0
for (i in 1:length(hr_lst)) {
str_spl = strsplit(hr_lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl) - 1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, NCHAR- 3, NCHAR)                  # extract the number of the image
if (system_cp) {
system2(command = "cp", args = c(hr_lst[i], paste(c(dir_HR_create, str_spl, ".png"), collapse = "")))
}
else {
im = OpenImageR::readImage(hr_lst[i])
im3d = OpenImageR::List_2_Array(list(im, im, im))
OpenImageR::writeImage(im3d, paste(c(dir_HR_create, str_spl, ".png"), collapse = ""))       # write images as 3-dimensional to new folder
count = count + 1
}
}
cat(count, "images were saved in", dir_HR_create, "\n")
}
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/")
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
system_cp = TRUE)
move_HR_2_folder = function(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
new_folder_extension = "deep_learn_train_HR/",
system_cp = FALSE) {
hr_lst = list.files(proba_data_path, full.names = T, recursive = T, include.dirs = F, pattern = "HR.png")
dir_HR_create = paste0(proba_data_path, new_folder_extension)
if (dir.exists(dir_HR_create)) {
system(paste("rm -r", dir_HR_create))
}
else {
dir.create(dir_HR_create)
}
count = 0
for (i in 1:length(hr_lst)) {
str_spl = strsplit(hr_lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl) - 1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, NCHAR- 3, NCHAR)                  # extract the number of the image
if (system_cp) {
system2(command = "cp", args = c(hr_lst[i], paste(c(dir_HR_create, str_spl, ".png"), collapse = "")))
}
else {
im = OpenImageR::readImage(hr_lst[i])
im3d = OpenImageR::List_2_Array(list(im, im, im))
OpenImageR::writeImage(im3d, paste(c(dir_HR_create, str_spl, ".png"), collapse = ""))       # write images as 3-dimensional to new folder
}
count = count + 1
}
cat(count, "images were saved in", dir_HR_create, "\n")
}
move_HR_2_folder = function(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
new_folder_extension = "deep_learn_train_HR/",
system_cp = FALSE) {
hr_lst = list.files(proba_data_path, full.names = T, recursive = T, include.dirs = F, pattern = "HR.png")
dir_HR_create = paste0(proba_data_path, new_folder_extension)
if (dir.exists(dir_HR_create)) {
system(paste("rm -r", dir_HR_create))
}
else {
dir.create(dir_HR_create)
}
count = 0
for (i in 1:length(hr_lst)) {
str_spl = strsplit(hr_lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl) - 1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, NCHAR- 3, NCHAR)                  # extract the number of the image
if (system_cp) {
system2(command = "cp", args = c(hr_lst[i], paste(c(dir_HR_create, str_spl, ".png"), collapse = "")))
}
else {
im = OpenImageR::readImage(hr_lst[i])
im3d = OpenImageR::List_2_Array(list(im, im, im))
OpenImageR::writeImage(im3d, paste(c(dir_HR_create, str_spl, ".png"), collapse = ""))       # write images as 3-dimensional to new folder
}
count = count + 1
}
cat(count, "images were saved in", dir_HR_create, "\n")
}
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR/",
new_folder_extension = "SEPARATELY/HR_ONLY_NIR/",
system_cp = TRUE)
move_HR_2_folder = function(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
dir_HR_create = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_NIR/",
system_cp = FALSE) {
hr_lst = list.files(proba_data_path, full.names = T, recursive = T, include.dirs = F, pattern = "HR.png")
# dir_HR_create = paste0(proba_data_path, new_folder_extension)
if (dir.exists(dir_HR_create)) {
system(paste("rm -r", dir_HR_create))
}
else {
dir.create(dir_HR_create)
}
count = 0
for (i in 1:length(hr_lst)) {
str_spl = strsplit(hr_lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl) - 1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, NCHAR- 3, NCHAR)                  # extract the number of the image
if (system_cp) {
system2(command = "cp", args = c(hr_lst[i], paste(c(dir_HR_create, str_spl, ".png"), collapse = "")))
}
else {
im = OpenImageR::readImage(hr_lst[i])
im3d = OpenImageR::List_2_Array(list(im, im, im))
OpenImageR::writeImage(im3d, paste(c(dir_HR_create, str_spl, ".png"), collapse = ""))       # write images as 3-dimensional to new folder
}
count = count + 1
}
cat(count, "images were saved in", dir_HR_create, "\n")
}
move_HR_2_folder = function(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
dir_HR_create = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_NIR/",
system_cp = FALSE) {
hr_lst = list.files(proba_data_path, full.names = T, recursive = T, include.dirs = F, pattern = "HR.png")
# dir_HR_create = paste0(proba_data_path, new_folder_extension)
if (dir.exists(dir_HR_create)) {
system(paste("rm -r", dir_HR_create))
}
else {
dir.create(dir_HR_create)
}
count = 0
for (i in 1:length(hr_lst)) {
str_spl = strsplit(hr_lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl) - 1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, NCHAR- 3, NCHAR)                  # extract the number of the image
if (system_cp) {
system2(command = "cp", args = c(hr_lst[i], paste(c(dir_HR_create, str_spl, ".png"), collapse = "")))
}
else {
im = OpenImageR::readImage(hr_lst[i])
im3d = OpenImageR::List_2_Array(list(im, im, im))
OpenImageR::writeImage(im3d, paste(c(dir_HR_create, str_spl, ".png"), collapse = ""))       # write images as 3-dimensional to new folder
}
count = count + 1
}
cat(count, "images were saved in", dir_HR_create, "\n")
}
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR/",
new_folder_extension = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_NIR/",
system_cp = TRUE)
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR/",
dir_HR_create = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_NIR/",
system_cp = TRUE)
move_HR_2_folder = function(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/",
dir_HR_create = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_NIR/",
system_cp = FALSE) {
hr_lst = list.files(proba_data_path, full.names = T, recursive = T, include.dirs = F, pattern = "HR.png")
# dir_HR_create = paste0(proba_data_path, new_folder_extension)
if (dir.exists(dir_HR_create)) {
system(paste("rm -r", dir_HR_create))
dir.create(dir_HR_create)
}
else {
dir.create(dir_HR_create)
}
count = 0
for (i in 1:length(hr_lst)) {
str_spl = strsplit(hr_lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl) - 1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, NCHAR- 3, NCHAR)                  # extract the number of the image
if (system_cp) {
system2(command = "cp", args = c(hr_lst[i], paste(c(dir_HR_create, str_spl, ".png"), collapse = "")))
}
else {
im = OpenImageR::readImage(hr_lst[i])
im3d = OpenImageR::List_2_Array(list(im, im, im))
OpenImageR::writeImage(im3d, paste(c(dir_HR_create, str_spl, ".png"), collapse = ""))       # write images as 3-dimensional to new folder
}
count = count + 1
}
cat(count, "images were saved in", dir_HR_create, "\n")
}
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR/",
dir_HR_create = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_NIR/",
system_cp = TRUE)
dat = move_HR_2_folder(proba_data_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/RED/",
dir_HR_create = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/HR_ONLY_RED/",
system_cp = TRUE)
dat = LR_images_separately(DIR = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/LR_ONLY_NIR",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
keep_LR_from_subfolder = function(subfolder_path = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR/imgset1306",
save_dir = "",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = FALSE) {
lst = list.files(subfolder_path, full.names = T)
NCHAR_sb = nchar(subfolder_path)
keep_dir_ext = substr(subfolder_path, NCHAR_sb-3, NCHAR_sb)
keep_LR_image = NA
NO_DATA = Inf
ID = NA
PERCENT = Inf
for (i in 1:length(lst)) {
tmp_vec = strsplit(lst[i], "/")[[1]]
last_item = tmp_vec[length(tmp_vec)]
first_2letters = substr(last_item, 1, 2)
if (first_2letters %in% c("QM", "LR")) {
num_item = as.numeric(substr(last_item, 4, 5))
if (first_2letters == "QM") {
tmp_im = OpenImageR::readImage(lst[i])
idx = length(which(tmp_im == 0))
if (idx < NO_DATA) {
NO_DATA = idx
PERCENT = round(idx / length(tmp_im), 3)
str_spl = strsplit(lst[i], "/")[[1]]
str_spl = str_spl[length(str_spl)]
str_spl = strsplit(str_spl, "[.]")[[1]][1]
NCHAR = nchar(str_spl)
str_spl = substr(str_spl, 3, NCHAR)                         # extract the number of the image
ID = str_spl                                                # update the ID
}
}
}
keep_LR_image = paste(c(subfolder_path, "/LR", ID, ".png"), collapse = "")
}
if (save_dir != "") {
if (substr(save_dir, nchar(save_dir), nchar(save_dir)) == "/") {
tmp_save_path = paste(c(save_dir, "imgset", keep_dir_ext, ".png"), collapse = "")
# tmp_save_path = paste(c(save_dir, keep_dir_ext, ".png"), collapse = "")
}
else {
tmp_save_path = paste(c(save_dir, "/imgset", keep_dir_ext, ".png"), collapse = "")
# tmp_save_path = paste(c(save_dir, "/", keep_dir_ext, ".png"), collapse = "")
}
# if (substr(save_dir, nchar(save_dir), nchar(save_dir)) == "/") {
#   tmp_save_path = paste(c(save_dir, "dir_", keep_dir_ext, "_", "LR", ID, ".png"), collapse = "")
# }
# else {
#   tmp_save_path = paste(c(save_dir, "/dir_", keep_dir_ext, "_", "LR", ID, ".png"), collapse = "")
# }
if (system_cp) {
system2(command = "cp", args = c(keep_LR_image, tmp_save_path))
}
else {
tmp_im = OpenImageR::readImage(keep_LR_image)                                                                 # in case of many images simply use: system("cp /from_path/tmp.png /to_dir")
if (convert_to_3d) {
tmp_im = OpenImageR::List_2_Array(list(tmp_im, tmp_im, tmp_im))                                               # convert to 3-dimensional (to be able to use with deep learning)
}
if (!is.null(apply_function)) {
tmp_im = apply_function(tmp_im)
}
OpenImageR::writeImage(tmp_im, tmp_save_path)             # png package writes only 'raw' or 'numeric' data
# loder::writePng(tmp_im, tmp_save_path)
}
}
return(list(keep_LR_image = keep_LR_image, NO_DATA = NO_DATA, PERCENT_NO_DATA = PERCENT))
}
LR_images_separately = function(DIR = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/deep_learn_test",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = FALSE) {
lst_ = list.files(DIR, full.names = T)
percent_nodata = rep(NA, length(lst_))
if (dir.exists(save_dir)) {
system(paste("rm -r", save_dir))                          # remove the directory in case that it exists
dir.create(save_dir)
}
if (!dir.exists(save_dir)) {
dir.create(save_dir)
}
for (i in 1:length(lst_)) {
each_lr_im = keep_LR_from_subfolder(subfolder_path = lst_[i], save_dir = save_dir, convert_to_3d = convert_to_3d, apply_function = apply_function, system_cp = system_cp)
percent_nodata[i] = each_lr_im$PERCENT_NO_DATA
}
return(percent_nodata)
}
dat = LR_images_separately(DIR = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/NIR",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/LR_ONLY_NIR",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
dat = LR_images_separately(DIR = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/train/RED",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/LR_ONLY_RED",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
dat = LR_images_separately(DIR = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/NIR",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/TEST_data_NIR",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
dat = LR_images_separately(DIR = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/test/RED",
save_dir = "/home/lampros/kaggle_competitions/PROBA_V/probav_data/SEPARATELY/TEST_data_RED",
convert_to_3d = FALSE,
apply_function = NULL,
system_cp = TRUE)
?dontrun
??dontrun
?tempdir
list.files(tempdir())
file.path(tempdir(), 'my_file.txt')
384/2
192/256
3/4
sentence = "1. Check hanson1005's suggestions about words such as doesn't and Aren't'. 2. Moreover, see how the function behaves with her corpus,
which has too many instances of word--word or word---word or low-level or life--forget. Additional words to check are : $27 and ``A"
t = tokenizers::tokenize_words(sentence, lowercase = TRUE, stopwords = c("aren't", "doesn't", "a"), strip_punct = TRUE, strip_numeric = F, simplify = FALSE)
t2 = textTinyR::tokenize_transform_vec_docs(object = c(sentence, sentence),                        # minimum number of sentences is 2
as_token = TRUE,
to_lower = TRUE,
remove_punctuation_string = FALSE,
remove_punctuation_vector = TRUE,
remove_numbers = FALSE,
trim_token = TRUE,
split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//-",                # I added '-'
remove_stopwords = c("aren't", "doesn't", "a"),
stemmer = NULL, # "porter2_stemmer",
threads = 1,
verbose = FALSE)
t
t2[[1]][[1]]
sentence = "1. Check hanson's suggestions about words such as doesn't and Aren't'. 2. Moreover, see how the function behaves with her corpus,
which has too many instances of word--word or word---word or low-level or life--forget. Additional words to check are : $27 and ``A"
t = tokenizers::tokenize_words(sentence, lowercase = TRUE, stopwords = c("aren't", "doesn't", "a"), strip_punct = TRUE, strip_numeric = F, simplify = FALSE)
t2 = textTinyR::tokenize_transform_vec_docs(object = c(sentence, sentence),                        # minimum number of sentences is 2
as_token = TRUE,
to_lower = TRUE,
remove_punctuation_string = FALSE,
remove_punctuation_vector = TRUE,
remove_numbers = FALSE,
trim_token = TRUE,
split_string = TRUE,
split_separator = " \r\n\t.,;:()?!//-",                # I added '-'
remove_stopwords = c("aren't", "doesn't", "a"),
stemmer = NULL, # "porter2_stemmer",
threads = 1,
verbose = FALSE)
t
t2[[1]][[1]]
setwd('/home/lampros/add_GITHUB/shiny-server/string_matching')
library(shiny)
runApp()
# reticulate::py_discover_config()
library(rsconnect)
deployApp()
setwd('/home/lampros/add_GITHUB/shiny-server/string_matching')
library(shiny)
runApp()
