run_cluster = FALSE)
library(finchR)
load(system.file("FINCH-Clustering/data/mnist_data_70k.RData", package = "finchR"))
class(mnist_data$x)
INPUT = '/home/lampros/add_GITHUB_PRIVATE/input.csv'
convert_to_GPU_knn_format(data = mnist_data$x,
output_file = INPUT)
convert_to_GPU_knn_format(data = mnist_data$x,
output_file = INPUT,
precision_digits = 13)
knn_cuda_exact(inputFile = INPUT,
outputFile = OUTPUT,
numberOfNeighbours = 1L,
method = 'EUCLIDEAN',
devices = list(0L),
run_cluster = FALSE)
library(nmslibR)
t_start = proc.time()
nmslib_params = list(space='l2',               # 'cosinesimil',
method = 'hnsw',
space_params = NULL,
index_filepath = NULL,
data_type = 'DENSE_VECTOR',
dtype = 'FLOAT',
print_progress = TRUE,
Time_Params = list('efSearch' = 100),
Index_Params = list('M'= 30,
'indexThreadQty' = 6,
'efConstruction' = 100,
'post' = 0,
'skip_optimized_index' = 1),
input_data = mnist_data$x)
init_nms = do.call(NMSlib$new, nmslib_params)
all_dat = init_nms$knn_Query_Batch(mnist_data$x, k = 1, num_threads = 6)
t_end = proc.time()
time_total = as.numeric((t_end - t_start)['elapsed'])
time_ = unsuperVLearn:::elapsed_time(time_total)
cat(time_, "\n")
knn_cuda_exact(inputFile = INPUT,
outputFile = OUTPUT,
numberOfNeighbours = 1L,
method = 'COSINE',
devices = list(0L),
run_cluster = FALSE)
library(KnnCuda)
#----------
# iris data
#----------
data(iris)
dat = as.matrix(iris[, 1:4])
INPUT = '/home/lampros/add_GITHUB_PRIVATE/input.csv'
convert_to_GPU_knn_format(data = dat,
output_file = INPUT,
precision_digits = 5)
OUTPUT = '/home/lampros/add_GITHUB_PRIVATE/output_'
knn_cuda_approx(inputFile = INPUT,
outputFile = OUTPUT,
numberOfNeighbours = 1L,
numberOfTrees = 10L,
numberOfElemsInLeaf = 10L,
numberOfPropagation = 10L,
method = 'EUCLIDEAN',
devices = list(0L),
run_cluster = FALSE)
library(finchR)
load(system.file("FINCH-Clustering/data/mnist_data_70k.RData", package = "finchR"))
convert_to_GPU_knn_format(data = mnist_data$x,
output_file = INPUT,
precision_digits = 13)
convert_to_GPU_knn_format(data = mnist_data$x,
output_file = INPUT,
precision_digits = 9)
knn_cuda_approx(inputFile = INPUT,
outputFile = OUTPUT,
numberOfNeighbours = 1L,
numberOfTrees = 10L,
numberOfElemsInLeaf = 10L,
numberOfPropagation = 10L,
method = 'COSINE',
devices = list(0L),
run_cluster = FALSE)
library(nmslibR)
t_start = proc.time()
nmslib_params = list(space='l2',               # 'cosinesimil',
method = 'hnsw',
space_params = NULL,
index_filepath = NULL,
data_type = 'DENSE_VECTOR',
dtype = 'FLOAT',
print_progress = TRUE,
Time_Params = list('efSearch' = 100),
Index_Params = list('M'= 30,
'indexThreadQty' = 6,
'efConstruction' = 100,
'post' = 0,
'skip_optimized_index' = 1),
input_data = mnist_data$x)
init_nms = do.call(NMSlib$new, nmslib_params)
all_dat = init_nms$knn_Query_Batch(mnist_data$x, k = 1, num_threads = 6)
t_end = proc.time()
time_total = as.numeric((t_end - t_start)['elapsed'])
time_ = unsuperVLearn:::elapsed_time(time_total)
cat(time_, "\n")
convert_to_GPU_knn_format(data = mnist_data$x * 255.0,
output_file = INPUT,
precision_digits = 3)
knn_cuda_approx(inputFile = INPUT,
outputFile = OUTPUT,
numberOfNeighbours = 1L,
numberOfTrees = 10L,
numberOfElemsInLeaf = 10L,
numberOfPropagation = 10L,
method = 'COSINE',
devices = list(0L),
run_cluster = FALSE)
knn_cuda_approx(inputFile = INPUT,
outputFile = OUTPUT,
numberOfNeighbours = 1L,
numberOfTrees = 10L,
numberOfElemsInLeaf = 10L,
numberOfPropagation = 10L,
method = 'EUCLIDEAN',
devices = list(0L),
run_cluster = FALSE)
library(KnnCuda)
print(display_ids())
init_snt = sentinel::Sentinel_2$new()
plg = "POLYGON ((138.506055106039 -34.9478577710456, 138.580137044224 -34.9478577710456, 138.580137044224 -34.8658068853977, 138.506055106039 -34.8658068853977, 138.506055106039 -34.9478577710456))"
init_snt$polygon_2_sqr_kms(wkt_polygon = plg)
init_snt$polygon_2_sqr_kms(wkt_polygon = plg) / 1000
init_snt$polygon_2_sqr_kms(wkt_polygon = plg)
init_snt$polygon_2_sqr_kms(wkt_polygon = plg) / 1e-6
1e-6
init_snt$polygon_2_sqr_kms(wkt_polygon = plg)
61629.01 * 1000
Gjson_to_WKT_Area = function(gjson_url_file_string = 'http://gbdxstories.digitalglobe.com/supporting-material/swimming-pools/properties.geojson',
gjson_subset_file = NULL,       # '/home/lampros/Downloads/swpools_subset.geojson'   use the geojson.io to extract a .geojson file for a specific subset
digits = 15) {
start = Sys.time()
options(digits = digits)                    # add the digits-options because arithmetic precision is very important for latitudes and longitudes which are included in geojson-objects
data_gjson = geojsonR::FROM_GeoJson(url_file_string = gjson_url_file_string, To_List = T)    # use 'To_List' otherwise I'll receive the coordinates in form of a matrix
init_snt = sentinel::Sentinel_2$new()
dat_lst = data_gjson[[1]]                # I only need the first sublist
if (!is.null(gjson_subset_file)) {
subset_gjson = geojsonR::FROM_GeoJson(url_file_string = gjson_subset_file, To_List = T)
ref_subs = init_snt$GeoJson_to_bounding_box(input_str = NULL, geojson_coordinates = list(subset_gjson$features[[1]]$geometry$coordinates), return_wkt = FALSE)
}
pb <- txtProgressBar(min = 0, max = length(dat_lst), style = 3)
vec_minx = vec_miny = vec_maxx = vec_maxy = rep(NA, length(dat_lst))
for (i in 1:length(dat_lst)) {
tmp_obj = list(dat_lst[[i]][[1]]$coordinates)
tmp_bbjs = init_snt$GeoJson_to_bounding_box(input_str = NULL, geojson_coordinates = tmp_obj, return_wkt = FALSE)
if (!is.null(gjson_subset_file)) {
if (tmp_bbjs$minX >= ref_subs$minX && tmp_bbjs$maxX <= ref_subs$maxX && tmp_bbjs$minY >= ref_subs$minY && tmp_bbjs$maxY <= ref_subs$maxY) {
vec_minx[i] = tmp_bbjs$minX
vec_miny[i] = tmp_bbjs$minY
vec_maxx[i] = tmp_bbjs$maxX
vec_maxy[i] = tmp_bbjs$maxY
}
}
else {
vec_minx[i] = tmp_bbjs$minX
vec_miny[i] = tmp_bbjs$minY
vec_maxx[i] = tmp_bbjs$maxX
vec_maxy[i] = tmp_bbjs$maxY
}
setTxtProgressBar(pb, i)
}
close(pb)
if (!is.null(gjson_subset_file)) {
vec_minx = vec_minx[!is.na(vec_minx)]
vec_miny = vec_miny[!is.na(vec_miny)]
vec_maxx = vec_maxx[!is.na(vec_maxx)]
vec_maxy = vec_maxy[!is.na(vec_maxy)]
}
mt = matrix(c(min(vec_minx), min(vec_miny), max(vec_maxx), max(vec_maxy)), nrow = 2, ncol = 2)      # create a bounding box of the output values
colnames(mt) = c('min', 'max')
rownames(mt) = c('lng', 'lat')
plg = init_snt$bbox_to_WKT(bbox = mt, return_geojson = TRUE)
end = Sys.time()
t = end - start
cat('time to complete :', t, attributes(t)$units, '\n')
return(list(GJson = plg$GeoJson,
bbox = mt,
WKT = plg,
square_kilometers = init_snt$polygon_2_sqr_kms(wkt_polygon = plg$WKT)))
}
aoi_object = Gjson_to_WKT_Area(gjson_url_file_string = 'http://gbdxstories.digitalglobe.com/supporting-material/swimming-pools/properties.geojson',
gjson_subset_file = '/home/lampros/Downloads/subset_california.geojson',      # NULL
digits = 15)
library(sentinel)
init = sentinel::Sentinel_2$new()
init$GeoJson_to_bounding_box('/home/lampros/Downloads/subset_california.geojson')
init$GeoJson_to_WKT('/home/lampros/Downloads/subset_california.geojson')
init$GeoJson_to_WKT('/home/lampros/Downloads/subset_california.geojson')
init$GeoJson_to_bounding_box('/home/lampros/Downloads/subset_california.geojson')
im = OpenImageR::readImage('/home/lampros/add_GITHUB_PRIVATE/SuperpixelKerasThreshDetect_DATA/a_Shrubs/resized_tiles/2016-10-13_bs_kleinberg_5cm_rgb_03_30.tif', convert = F)
im = OpenImageR::readImage('/home/lampros/add_GITHUB_PRIVATE/SuperpixelKerasThreshDetect_DATA/a_Shrubs/resized_tiles/2016-10-13_bs_kleinberg_5cm_rgb_03_30.tif', convert = T)
str(im)
OpenImageR::imageShow(im)
im1 = OpenImageR::resizeImage(im, 224, 224, method = 'bilinear')
OpenImageR::imageShow(im1)
OpenImageR::writeImage(im1, file_name = '/home/lampros/Downloads/DELETE_shr.jpg')
29000/256
?gdalUtils::gdalwarp
threads = 1
num_threads = paste0("NUM_THREADS=", threads)
num_threads
load('/home/lampros/Downloads/tmp_del.RDATA')
ls()
str(tmp_del)
tmp_del
library(sentinel)
init = sentinel::Sentinel_2$new()
init$GDAL_MERGE_INFRARED(R_file = "/home/lampros/Downloads/DELETE_s2_COPY/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242/B11.jp2", G_file = "/home/lampros/Downloads/DELETE_s2_COPY/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242/B08.jp2", B_file = "/home/lampros/Downloads/DELETE_s2_COPY/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242/B04.jp2", OUTPUT_file = "/home/lampros/Downloads/INFRARED.tif",
Suppress_Warn_Error_File = "Warn_Errors.txt", verbose = T)
im = OpenImageR::readImage('/home/lampros/Downloads/INFRARED_CROP.tif', conve)
im = OpenImageR::readImage('/home/lampros/Downloads/INFRARED_CROP.tif', convert = T)
OpenImageR::imageShow(im)
im = OpenImageR::readImage('/home/lampros/Downloads/INFRARED_CROP.tif', convert = F)
OpenImageR::imageShow(im)
# S2_prefer_year_closest_to
load('/home/lampros/Downloads/tmp_del.RDATA')
ls()
str(tmp_del)
tmp_del
s2_df = tmp_del[[1]]
s2_df
matching_criteria = list(WKT_contains = TRUE,
S1_orbit_direction = NULL,
day_month_closest = TRUE,
S2_prefer_year_closest_to = 2017,
S2_prefer_year_clouds_percentage_less_than = 3)
s2_df[2, ]$year = 2017
s2_df[4, ]$year = 2016
s2_df[3, ]$year = 2019
s2_df
str(s2_df)
matching_criteria = list(WKT_contains = TRUE,
S1_orbit_direction = NULL,
day_month_closest = TRUE,
S2_prefer_year_closest_to = "2017",
S2_prefer_year_clouds_percentage_less_than = 3)
s2_df = subset(s2_df, cloudyPixelPercentage < matching_criteria$S2_prefer_year_clouds_percentage_less_than)
s2_df
s2_df
dates_prefer = lapply(1:nrow(s2_df), function(x) as.Date(paste(s2_df[x, 1:3], collapse = "/"), "%d/%m/%Y"))
dates_prefer
str(dates_prefer)
unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d/%m/%Y") ))))
matching_criteria = list(WKT_contains = TRUE,
S1_orbit_direction = NULL,
day_month_closest = TRUE,
S2_prefer_Date_closest_to = "01-01-2017",                 # either NULL or a character string such as "01-01-2018" ( "day-month-year" )
S2_prefer_Date_clouds_percentage_less_than = 3
)
match_prefer = which.min(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d/%m/%Y") )))))
unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d/%m/%Y") ))))
dates_prefer
as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d/%m/%Y")
matching_criteria$S2_prefer_Date_closest_to
as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y")
unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") ))))
which.min(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))))
order(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))), decreasing = F)
order(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))), decreasing = T)
rank(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))))
s2_df
s2_df = s2_df[match_prefer, ]
s2_df
match_prefer
s2_df = subset(s2_df, cloudyPixelPercentage < matching_criteria$S2_prefer_Date_clouds_percentage_less_than)
s2_df
s2_df = subset(s2_df, cloudyPixelPercentage < matching_criteria$S2_prefer_year_clouds_percentage_less_than)
s2_df = tmp_del[[1]]
s2_df[3, ]$year = 2019; s2_df[4, ]$year = 2016 ; s2_df[2, ]$year = 2017
s2_df = subset(s2_df, cloudyPixelPercentage < matching_criteria$S2_prefer_year_clouds_percentage_less_than)
s2_df
s2_df
s2_df = tmp_del[[1]]
s2_df
s2_df = subset(s2_df, cloudyPixelPercentage < matching_criteria$S2_prefer_Date_clouds_percentage_less_than)
s2_df
s2_df[3, ]$year = 2019; s2_df[4, ]$year = 2016 ; s2_df[2, ]$year = 2017
s2_df
dates_prefer = lapply(1:nrow(s2_df), function(x) as.Date(paste(s2_df[x, 1:3], collapse = "/"), "%d/%m/%Y"))
dates_prefer
match_prefer = rank(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))))
match_prefer
s2_df
s2_df = s2_df[match_prefer, ]
s2_df
c(1:5)[match_prefer]
s2_df = tmp_del[[1]]
s2_df = subset(s2_df, cloudyPixelPercentage < matching_criteria$S2_prefer_Date_clouds_percentage_less_than)
s2_df
s2_df[3, ]$year = 2019; s2_df[4, ]$year = 2016 ; s2_df[2, ]$year = 2017
s2_df
dates_prefer = lapply(1:nrow(s2_df), function(x) as.Date(paste(s2_df[x, 1:3], collapse = "/"), "%d/%m/%Y"))
match_prefer = rank(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))))
match_prefer
order(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))))
order(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))), decreasing = T)
order(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))), decreasing = F)
s2_df
match_prefer = order(unlist(lapply(dates_prefer, function(x) abs(as.integer(x - as.Date( matching_criteria$S2_prefer_Date_closest_to, "%d-%m-%Y") )))), decreasing = F)
match_prefer
"01-01-2017"
s2_df[match_prefer, ]
library(bigrquery)
project <- "eng-throne-227415"                            # put your project ID here
# In the next line I search for a specific mgrs-tile and convert the 'cloud_cover' column to float because it's of type character  [ "bigquery-public-data:cloud_storage_geo_index.sentinel_2_index" is the online-index ]
sql <- sql <- "SELECT * FROM [bigquery-public-data:cloud_storage_geo_index.sentinel_2_index] WHERE (mgrs_tile == '19LFE' AND FLOAT(cloud_cover) < 3.0)"
subset = query_exec(sql, project = project)               # then perform the query
dim(subset)
subset
sql_nested = "SELECT SUBSTRING(granule_id, 1, 12) as NEW_COL FROM (SELECT * FROM [bigquery-public-data:cloud_storage_geo_index.sentinel_2_index] WHERE (mgrs_tile == '19LFE' AND FLOAT(cloud_cover) < 3.0)) GROUP BY NEW_COL"
subset_nested = query_exec(sql_nested, project = project)
subset_nested
system('gsutil ls gs://gcp-public-data-sentinel-2/tiles/19/L/FE/')
f = system2(command = "gsutil", args = c('ls', 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/'), stdout = T, stderr = T)
f
length(f)
str(f)
'L1C' in f[1]
f[1]
'L1C' %in% f[1]
?gsub
gregexpr('L1C', f[1])
gregexpr('L1C', f[1], useBytes = F)
s = gregexpr('L1C', f[1], useBytes = F)
s
#substring(f[1], s[[1]], s[[1]] + s)
str(s)
attr(s)
attr(s, "match.length")
attributes(s, "match.length")
attributes(s)
unlist(s)
attr(s[[1]], "match.length")
substring(f[1], s[[1]], s[[1]] + attr(s[[1]], "match.length"))
substring(f[1], s[[1]], s[[1]] + attr(s[[1]], "match.length") - 1)
#sapply(f, function(x) { tmp = gregexpr('L2A', x) })
gregexpr('L2A', f[1])
gregexpr('L2A', f[1])[[1]]
unlist(gregexpr('L2A', f[1])[[1]])
d = unlist(gregexpr('L2A', f[1])[[1]])
d
as.integer(gregexpr('L2A', f[1]))
sapply(f, function(x) { tmp = gregexpr('L2A', x); if (as.integer(tmp) != -1) { substring(f[1], s[[1]], s[[1]] + attr(s[[1]], "match.length") - 1) } })
out = sapply(f, function(x) { tmp = gregexpr('L2A', x); if (as.integer(tmp) != -1) { substring(f[1], s[[1]], s[[1]] + attr(s[[1]], "match.length") - 1) } })
length(out)
as.vector(out)
class(out)
unlist(out)
f = system2(command = "gsutil", args = c('ls', 'gs://gcp-public-data-sentinel-2/tiles/33/U/UP/'), stdout = T, stderr = T)
length(f)
out = sapply(f, function(x) { tmp = gregexpr('L2A', x); if (as.integer(tmp) != -1) { substring(f[1], s[[1]], s[[1]] + attr(s[[1]], "match.length") - 1) } })
unlist(out)
out = sapply(f, function(x) {
tmp = gregexpr('L2A', x)
if (as.integer(tmp) != -1) {
substring(x, tmp[[1]], tmp[[1]] + attr(tmp[[1]], "match.length") - 1)
}
})
out
res = unlist(out)
res
length(res)
out = sapply(f, function(x) {
tmp = gregexpr('L2A', x)
if (as.integer(tmp) != -1) {
#substring(x, tmp[[1]], tmp[[1]] + attr(tmp[[1]], "match.length") - 1)
x
}
})
res = unlist(out)
length(res)
res
res = as.vector(unlist(out))
res
system('gsutil ls gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20170129T143751_N0204_R096_T19LFE_20170129T144458.SAFE/')
lst = list(OpenImageR::readImage('/home/lampros/Downloads/SUPERRES/SRB11.png'), OpenImageR::readImage('/home/lampros/Downloads/SUPERRES/SRB8A.png'),OpenImageR::readImage('/home/lampros/Downloads/SUPERRES/B4.png'))
str(lst)
arr = OpenImageR::List_2_Array(lst)
OpenImageR::imageShow(arr)
OpenImageR::writeImage(arr, '/home/lampros/Downloads/SUPERRES/RGB_openimageR.png')
lst = list(OpenImageR::readImage('/home/lampros/Downloads/SUPERRES1/SRB12.png'), OpenImageR::readImage('/home/lampros/Downloads/SUPERRES1/SRB11.png'),OpenImageR::readImage('/home/lampros/Downloads/SUPERRES1/B4.png'))
str(lst)
arr = OpenImageR::List_2_Array(lst)
OpenImageR::imageShow(arr)
OpenImageR::writeImage(arr, '/home/lampros/Downloads/SUPERRES1/RGB_openimageR.png')
library("SuperpixelImageSegmentation", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
init = Image_Segmentation$new()
summary(as.vector(arr))
dim(arr)
spx_km = init$spixel_segmentation(input_image = arr,
superpixel = 200,
AP_data = TRUE,
use_median = TRUE,
sim_wL = 3,
sim_wA = 10,
sim_wB = 10,
sim_color_radius = 10,
kmeans_method = "kmeans",
kmeans_initializer = "kmeans++",
kmeans_num_init = 3,
kmeans_max_iters = 100,
verbose = TRUE)
OpenImageR::imageShow(spx_km$AP_image_data)
spx_km = init$spixel_segmentation(input_image = arr,
superpixel = 50,
AP_data = TRUE,
use_median = TRUE,
sim_wL = 3,
sim_wA = 10,
sim_wB = 10,
sim_color_radius = 10,
kmeans_method = "kmeans",
kmeans_initializer = "kmeans++",
kmeans_num_init = 3,
kmeans_max_iters = 100,
verbose = TRUE)
OpenImageR::imageShow(spx_km$AP_image_data)
OpenImageR::imageShow(spx_km$KMeans_image_data)
spx_km = init$spixel_segmentation(input_image = arr,
superpixel = 50,
AP_data = TRUE,
use_median = TRUE,
sim_wL = 3,
sim_wA = 10,
sim_wB = 10,
sim_color_radius = 10,
kmeans_method = "kmeans",
kmeans_initializer = "kmeans++",
kmeans_num_init = 3,
kmeans_max_iters = 100, adjust_centroids_and_return_masks = TRUE,
verbose = TRUE)
init$spixel_masks_show(display_all = TRUE)
im = OpenImageR::readImage('/home/lampros/Downloads/SUPERRES/RGB_openimageR.png')
dim(im)
spx_km = init$spixel_segmentation(input_image = im,
superpixel = 50,
AP_data = TRUE,
use_median = TRUE,
sim_wL = 3,
sim_wA = 10,
sim_wB = 10,
sim_color_radius = 10,
kmeans_method = "kmeans",
kmeans_initializer = "kmeans++",
kmeans_num_init = 3,
kmeans_max_iters = 100,
verbose = TRUE)
OpenImageR::imageShow(spx_km$AP_image_data)
spx_km = init$spixel_segmentation(input_image = im,
superpixel = 50,
AP_data = TRUE,
use_median = TRUE,
sim_wL = 3,
sim_wA = 10,
sim_wB = 10,
sim_color_radius = 10,
kmeans_method = "kmeans",
kmeans_initializer = "kmeans++",
kmeans_num_init = 3,
kmeans_max_iters = 100, adjust_centroids_and_return_masks = TRUE,
verbose = TRUE)
init$spixel_masks_show(display_all = TRUE)
spx_km = init$spixel_segmentation(input_image = im,
superpixel = 100,
AP_data = TRUE,
use_median = TRUE,
sim_wL = 3,
sim_wA = 10,
sim_wB = 10,
sim_color_radius = 10,
kmeans_method = "kmeans",
kmeans_initializer = "kmeans++",
kmeans_num_init = 3,
kmeans_max_iters = 100,
verbose = TRUE)
OpenImageR::imageShow(spx_km$AP_image_data)
system2(command = "gsutil", args = c('ls', 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/'), stdout = F, stderr = T)
library(superres)
pth = 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/'
gsutil_list_files(gs_tile_path = pth, find_product_pattern = 'L2A')
library(superres)
pth = 'gs://gcp-public-data-sentinel-2/tiles/33/U/UP/'
gsutil_list_files(gs_tile_path = pth, find_product_pattern = 'L2A')
gsutil_list_files('gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242.SAFE')
library(superres)
gsutil_list_files('gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242.SAFE')
gsutil_list_files('gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242.SAFE/DATASTRIP/')
gsutil_list_files('gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242.SAFE/GRANULE/')
gsutil_list_files('gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242.SAFE/GRANULE/L1C_T19LFE_A019827_20190409T143843/')
gsutil_list_files('gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2A_MSIL1C_20190409T143751_N0207_R096_T19LFE_20190409T180242.SAFE/GRANULE/L1C_T19LFE_A019827_20190409T143843/IMG_DATA/')
library(superres)
pth = 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2B_MSIL1C_20180810T144729_N0206_R139_T19LFE_20180810T194031.SAFE'
gsutil_list_files(gs_tile_path = pth)
pth = 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2B_MSIL1C_20180810T144729_N0206_R139_T19LFE_20180810T194031.SAFE/GRANULE/'
gsutil_list_files(gs_tile_path = pth)
pth = 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2B_MSIL1C_20180810T144729_N0206_R139_T19LFE_20180810T194031.SAFE/GRANULE/L1C_T19LFE_A007458_20180810T144802/'
gsutil_list_files(gs_tile_path = pth)
pth = 'gs://gcp-public-data-sentinel-2/tiles/19/L/FE/S2B_MSIL1C_20180810T144729_N0206_R139_T19LFE_20180810T194031.SAFE/GRANULE/L1C_T19LFE_A007458_20180810T144802/IMG_DATA/'
gsutil_list_files(gs_tile_path = pth)
setwd('/home/lampros/add_GITHUB/shiny-server/geocoding_geojson')
library(shiny)
runApp()
runApp()
runApp()
runApp()
